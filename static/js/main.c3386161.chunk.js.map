{"version":3,"sources":["components/Results.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["Result","react_default","a","createElement","NavBar","AppBar_default","position","Toolbar_default","Typography_default","variant","color","CheckboxesGroup","state","show","one","two","three","four","five","six","seven","eight","nine","data","handleChange","name","event","_this","setState","Object","defineProperty","target","checked","hide","classes","this","props","console","log","_this$state","filter","v","length","react_router_dom","components_NavBar","Grid_default","container","spacing","item","xs","Paper_default","FormControl_default","component","className","formControl","FormLabel_default","FormGroup_default","FormControlLabel_default","control","Checkbox_default","onChange","value","label","Button_default","Link","to","onClick","react_router","exact","path","Results","Component","withStyles","theme","root","display","margin","unit","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3386161.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Result = () => {\n    return (\n    <div>\n       <h1>Hi</h1>\n    </div>\n    )\n};\nexport default Result;","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst NavBar = () => {\n    return (\n    <div>\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography variant=\"h6\" color=\"inherit\">Atlanta Livability Index</Typography>\n            </Toolbar>\n        </AppBar>\n    </div>\n    )\n};\nexport default NavBar;","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom';\n\nimport Results from './components/Results';\nimport NavBar from './components/NavBar';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\n\n\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n  },\n  formControl: {\n    margin: theme.spacing.unit * 3,\n  },\n});\n\n\nclass CheckboxesGroup extends Component {\n  state = {\n    show: true,\n    one: false,\n    two: false,\n    three: false,\n    four: false,\n    five: false,\n    six: false,\n    seven: false,\n    eight: false,\n    nine: false,\n    data: null\n  };\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.checked });\n  };\n\n  hide = () => {\n    this.setState({show: false})\n  }\n  render() {\n    const { classes } = this.props;\n    console.log(this.props)\n    const { one, two, three, four, five, six, seven, eight, nine } = this.state;\n    const error = [one, two, three, four, five, six, seven, eight, nine].filter(v => v).length >= 3;\n    return (\n      <Router>\n          <NavBar/>\n          {this.state.show ? <div>\n              <Grid container spacing={24}><Grid item xs></Grid><Grid item xs><Paper>\n                    <FormControl component=\"fieldset\" className={classes.formControl}>\n                      <FormLabel component=\"legend\">Please Select From the Below Options:</FormLabel>\n                      <FormGroup>\n                        <FormControlLabel\n                          control={<Checkbox checked={one} onChange={this.handleChange('one')} value=\"one\" />}\n                          label=\"Statement One\"\n                        />\n                        <FormControlLabel\n                          control={<Checkbox checked={two} onChange={this.handleChange('two')} value=\"two\" />}\n                          label=\"Statement Two\"\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={three} onChange={this.handleChange('three')} value=\"three\" />}\n                            label=\"Statement Three\"\n                        />\n                        <FormControlLabel\n                          control={<Checkbox checked={four} onChange={this.handleChange('four')} value=\"four\" />}\n                          label=\"Statement Four\"\n                        />\n                      </FormGroup>\n                      <Button component={Link} to=\"/results\" variant=\"contained\" color=\"secondary\" onClick={this.hide}>Submit</Button>\n                    </FormControl>\n                  </Paper></Grid><Grid item xs></Grid></Grid>\n          </div> : null}\n          <Route exact path=\"/results\" component={Results} />\n\n      </Router>\n    );\n  }\n}\n\nexport default withStyles(styles)(CheckboxesGroup);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}