{"version":3,"sources":["components/Results.js","components/data.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["Results","_ref","allData","console","log","margin","width","height","x","scaleBand","rangeRound","padding","y","scaleLinear","data","tsvParse","d","frequency","domain","map","letter","max","react_default","a","createElement","transform","concat","className","ref","node","select","call","axisBottom","axisLeft","ticks","dy","textAnchor","key","bandwidth","NavBar","AppBar_default","position","Toolbar_default","Typography_default","variant","color","CheckboxesGroup","state","show","one","two","three","four","five","six","seven","label","value","handleChange","name","event","_this","setState","Object","defineProperty","target","checked","hide","_this2","this","classes","props","_this$state","eight","nine","react_router_dom","components_NavBar","Grid_default","container","spacing","item","xs","Paper_default","FormControl_default","component","formControl","FormLabel_default","FormGroup_default","FormControlLabel_default","control","Checkbox_default","onChange","Button_default","Link","to","onClick","react_router","exact","path","render","components_Results","assign","Component","withStyles","theme","root","display","unit","Boolean","window","location","hostname","match","ReactDOM","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d26b4df.chunk.js","sourcesContent":["import React from 'react';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\nimport { tsvParse } from 'd3-dsv';\nimport { max } from 'd3-array';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { select } from 'd3-selection';\n\n// Same as data.tsv\nimport dataTsv from './data';\n\nimport './chart.css';\nconst Results = ({allData}) => {\n    console.log(allData)\nconst svgWidth = 960,\n  svgHeight = 500;\n\n//Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\nconst margin = { top: 20, right: 20, bottom: 30, left: 40 },\n  width = svgWidth - margin.left - margin.right,\n  height = svgHeight - margin.top - margin.bottom;\n\nconst x = scaleBand()\n    .rangeRound([0, width])\n    .padding(0.1),\n  y = scaleLinear().rangeRound([height, 0]);\n\nconst data = tsvParse(dataTsv, d => {\n  d.frequency = +d.frequency;\n  return d;\n});\n\nx.domain(data.map(d => d.letter));\ny.domain([0, max(data, d => d.frequency)]);\n\nreturn (\n  <svg width={svgWidth} height={svgHeight}>\n    <g transform={`translate(${margin.left}, ${margin.top})`}>\n      <g\n        className=\"axis axis--x\"\n        transform={`translate(0, ${height})`}\n        ref={node => select(node).call(axisBottom(x))}\n      />\n      <g className=\"axis axis--y\">\n        <g ref={node => select(node).call(axisLeft(y).ticks(10, '%'))} />\n        {/* Note: In the actual example 'Frequency' is a child of the above 'g' and it doesn't render. \n          * Changing it to a sibiling allows it to render and having the axis as an empty 'g' means that it will also play nicer with react:\n          * \"The easiest way to avoid conflicts is to prevent the React component from updating. You can do this by rendering elements that React has no reason to update, like an empty <div />.\"\n          * https://reactjs.org/docs/integrating-with-other-libraries.html \n          */}\n        <text transform=\"rotate(-90)\" y=\"6\" dy=\"0.71em\" textAnchor=\"end\">\n          TEST TEST TEST\n        </text>\n      </g>\n      {data.map(d => (\n        <rect\n          key={d.letter}\n          className=\"bar\"\n          x={x(d.letter)}\n          y={y(d.frequency)}\n          width={x.bandwidth()}\n          height={height - y(d.frequency)}\n        />\n      ))}\n    </g>\n  </svg>\n);\n      }\n\nexport default Results;\n","export default `letter\tfrequency\nA\t.08167\nB\t.01492\nC\t.02782\nD\t.04253\nE\t.12702\nF\t.02288\nG\t.02015\nH\t.06094\nI\t.06966\nJ\t.00153\nK\t.00772\nL\t.04025\nM\t.02406\nN\t.06749\nO\t.07507\nP\t.01929\nQ\t.00095\nR\t.05987\nS\t.06327\nT\t.09056\nU\t.02758\nV\t.00978\nW\t.02360\nX\t.00150\nY\t.01974\nZ\t.00074`;","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst NavBar = () => {\n    return (\n    <div>\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography variant=\"h6\" color=\"inherit\">Atlanta Livability Index</Typography>\n            </Toolbar>\n        </AppBar>\n    </div>\n    )\n};\nexport default NavBar;","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom';\n\nimport Results from './components/Results';\nimport NavBar from './components/NavBar';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\n\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n  },\n  formControl: {\n    margin: theme.spacing.unit * 3,\n  },\n});\n\n\nclass CheckboxesGroup extends Component {\n  state = {\n    show: true,\n    one: false,\n    two: false,\n    three: false,\n    four: false,\n    five: false,\n    six: false,\n    seven: false,\n    data:[\n      { label: 'CRM', value: 1 },\n      { label: 'API', value: 1 },\n      { label: 'Data', value: 1 },\n      { label: 'Commerce', value: 1 },\n      { label: 'AI', value: 3 },\n      { label: 'Management', value: 5 },\n      { label: 'Testing', value: 6 },\n      { label: 'Mobile', value: 9 },\n      { label: 'Conversion', value: 9 },\n      { label: 'Misc', value: 21 },\n      { label: 'Databases', value: 22 },\n      { label: 'DevOps', value: 22 },\n      { label: 'Javascript', value: 23 },\n      { label: 'Languages / Frameworks', value: 25 },\n      { label: 'Front End', value: 26 },\n      { label: 'Content', value: 26 }\n    ]\n  };\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.checked });\n  };\n\n  hide = () => {\n    this.setState({show: !this.state.show})\n  }\n \n  render() {\n    const { classes } = this.props;\n    const { one, two, three, four, five, six, seven, eight, nine } = this.state;\n\n    return (\n      <Router>\n          <NavBar/>\n          {this.state.show ? <div>\n              <Grid container spacing={24}><Grid item xs></Grid><Grid item xs><Paper>\n                    <FormControl component=\"fieldset\" className={classes.formControl}>\n                      <FormLabel component=\"legend\">Please Check the box if the statement is TRUE:</FormLabel>\n                      <FormGroup>\n                        <FormControlLabel\n                          control={<Checkbox checked={one} onChange={this.handleChange('one')} value=\"one\" />}\n                          label=\"I consider myself a worrier.\"\n                        />\n                        <FormControlLabel\n                          control={<Checkbox checked={two} onChange={this.handleChange('two')} value=\"two\" />}\n                          label=\"I visit the park at least once a month.\"\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={three} onChange={this.handleChange('three')} value=\"three\" />}\n                            label=\"I am a smoker.\"\n                        />\n                        <FormControlLabel\n                          control={<Checkbox checked={four} onChange={this.handleChange('four')} value=\"four\" />}\n                          label=\"I am easily frustrated.\"\n                        />\n                        <FormControlLabel\n                          control={<Checkbox checked={five} onChange={this.handleChange('five')} value=\"five\" />}\n                          label=\"I have children in school.\"\n                        />\n                        <FormControlLabel\n                            control={<Checkbox checked={six} onChange={this.handleChange('six')} value=\"six\" />}\n                            label=\"I often work extra hours.\"\n                        />\n                        <FormControlLabel\n                          control={<Checkbox checked={seven} onChange={this.handleChange('seven')} value=\"seven\" />}\n                          label=\"I prefer variety to routine.\"\n                        />\n                      </FormGroup>\n                      <Button \n                      component={Link} to=\"/results\" \n                      variant=\"contained\" color=\"secondary\" onClick={this.hide}>Submit</Button>\n                    </FormControl>\n                  </Paper></Grid><Grid item xs></Grid></Grid>\n          </div> : null}\n          {!this.state.show ?<div>\n                <Route exact path=\"/results\" render={ (props) => <Results {...props} allData = {this.state} /> } />\n                <Button component={Link} to=\"/\"\n                variant=\"contained\" color=\"secondary\" onClick={this.hide}>Back</Button>\n          </div> : null}\n      </Router>\n    );\n  }\n}\n\nexport default withStyles(styles)(CheckboxesGroup);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}