{"version":3,"sources":["components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["RadioButtonsGroup","state","data","handleChange","event","_this","setState","value","target","classes","this","props","react_default","a","createElement","className","root","index_es","container","spacing","item","xs","Paper_default","FormControl_default","component","formControl","FormLabel_default","RadioGroup_default","aria-label","name","group","onChange","FormControlLabel_default","control","Radio_default","label","variant","color","React","Component","withStyles","theme","display","margin","unit","concat","App","react_router_dom","AppBar_default","position","Toolbar_default","Typography_default","NavBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.137ea6ee.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Paper from '@material-ui/core/Paper';\n\nimport { Button, Grid } from '@material-ui/core';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n\n  },\n  formControl: {\n    margin: theme.spacing.unit * 6,\n  },\n  group: {\n    margin: `${theme.spacing.unit}px 0`,\n  },\n});\n\nclass RadioButtonsGroup extends React.Component {\n  state = {\n    data: \"test\",\n  };\n\n  handleChange = event => {\n    this.setState({ value: event.target.value });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n\n      <div className={classes.root}>\n      <Grid container spacing={24}>\n        <Grid item xs>\n                <Paper></Paper>\n            </Grid>\n\n        <Grid item xs>\n            <Paper >\n                <FormControl component=\"fieldset\" className={classes.formControl}>\n                <FormLabel component=\"legend\">Livability Questions: Please Select From Below</FormLabel>\n                <RadioGroup\n                    aria-label=\"test\"\n                    name=\"test\"\n                    className={classes.group}\n                    value={this.state.value}\n                    onChange={this.handleChange}\n                >\n                    <FormControlLabel value=\"one\" control={<Radio />} label=\"Statement One\" />\n                    <FormControlLabel value=\"two\" control={<Radio />} label=\"Statement Two\" />\n                    <FormControlLabel value=\"three\" control={<Radio />} label=\"Statement Three\" />\n                    <FormControlLabel value=\"four\" control={<Radio />} label=\"Statement Four\" />\n                    <FormControlLabel value=\"five\" control={<Radio />} label=\"Statement Five\" />\n                    <FormControlLabel value=\"six\" control={<Radio />} label=\"Statement Six\" />\n                    <FormControlLabel value=\"seven\" control={<Radio />} label=\"Statement Seven\" />\n                    {/* <FormControlLabel\n                    value=\"disabled\"\n                    disabled\n                    control={<Radio />}\n                    label=\"(Disabled option)\"\n                    /> */}\n                    <Button variant=\"h6\" color=\"inherit\">Submit</Button>\n                </RadioGroup>\n                </FormControl>\n                </Paper>\n            </Grid>\n            <Grid item xs>\n                <Paper></Paper>\n            </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nRadioButtonsGroup.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(RadioButtonsGroup);","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n} from 'react-router-dom';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport NavBar from './components/NavBar';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n          <AppBar position=\"static\">\n            <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\">\n                Atlanta Livability Index\n            </Typography>\n            </Toolbar>\n        </AppBar>\n        <div>\n            <NavBar/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}